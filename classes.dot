digraph "classes" {
rankdir=BT
charset="utf-8"
"winder.Control.Control.APA_Base.APA_Base" [color="black", fontcolor="black", label=<{APA_Base|FILE_NAME : str<br ALIGN="LEFT"/>LOG_FILE : str<br ALIGN="LEFT"/>SERIALIZED_VARIABLES : list<br ALIGN="LEFT"/>STAGE_SIDE : list<br ALIGN="LEFT"/>|addWindTime(time)<br ALIGN="LEFT"/>create(apaDirectory, name)<br ALIGN="LEFT"/>getLayer()<br ALIGN="LEFT"/>getName()<br ALIGN="LEFT"/>getPath()<br ALIGN="LEFT"/>getRecipe()<br ALIGN="LEFT"/>getStage()<br ALIGN="LEFT"/>load(nameOverride)<br ALIGN="LEFT"/>save()<br ALIGN="LEFT"/>setLocation(x, y, headLocation)<br ALIGN="LEFT"/>toDictionary()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"winder.Control.Control.AnodePlaneArray.AnodePlaneArray" [color="black", fontcolor="black", label=<{AnodePlaneArray|<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>closeLoadedRecipe()<br ALIGN="LEFT"/>getCalibrationFile()<br ALIGN="LEFT"/>load()<br ALIGN="LEFT"/>loadRecipe(layer, recipeFile, startingLine)<br ALIGN="LEFT"/>save()<br ALIGN="LEFT"/>setStage(stage, message)<br ALIGN="LEFT"/>setupBlankCalibration(layer, geometry)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"winder.Control.Control.CalibrationMode.CalibrationMode" [color="black", fontcolor="black", label=<{CalibrationMode|SHUTDOWN_COUNT : int<br ALIGN="LEFT"/>|enter()<br ALIGN="LEFT"/>exit()<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"winder.Control.Control.CameraCalibration.CameraCalibration" [color="black", fontcolor="black", label=<{CameraCalibration|<br ALIGN="LEFT"/>|centerCurrentLocation()<br ALIGN="LEFT"/>commitCalibration(layerCalibration, geometry, isFront, offsetX, offsetY)<br ALIGN="LEFT"/>getCalibrationData()<br ALIGN="LEFT"/>pixelsPer_mm(pixelsPer_mm)<br ALIGN="LEFT"/>poll()<br ALIGN="LEFT"/>reset()<br ALIGN="LEFT"/>save(filePath, fileName)<br ALIGN="LEFT"/>setCalibrationData(pin, x, y)<br ALIGN="LEFT"/>setupCalibration(side, startPin, direction, pinMax)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"winder.Control.Control.ControlStateMachine.ControlStateMachine" [color="black", fontcolor="black", label=<{ControlStateMachine|calibrationMode<br ALIGN="LEFT"/>calibrationRequest : bool<br ALIGN="LEFT"/>cameraCalibration : NoneType<br ALIGN="LEFT"/>executeGCode : bool<br ALIGN="LEFT"/>gCodeHandler : NoneType<br ALIGN="LEFT"/>hardwareMode<br ALIGN="LEFT"/>idleServos : bool<br ALIGN="LEFT"/>isJogging : bool<br ALIGN="LEFT"/>loopMode : bool<br ALIGN="LEFT"/>manualMode<br ALIGN="LEFT"/>manualRequest : bool<br ALIGN="LEFT"/>positionLogging : bool<br ALIGN="LEFT"/>seekAcceleration : NoneType<br ALIGN="LEFT"/>seekDeceleration : NoneType<br ALIGN="LEFT"/>seekVelocity : NoneType<br ALIGN="LEFT"/>seekX : NoneType<br ALIGN="LEFT"/>seekY : NoneType<br ALIGN="LEFT"/>seekZ : NoneType<br ALIGN="LEFT"/>setHeadPosition : NoneType<br ALIGN="LEFT"/>startRequest : bool<br ALIGN="LEFT"/>stopMode<br ALIGN="LEFT"/>stopNextRequest : bool<br ALIGN="LEFT"/>stopRequest : bool<br ALIGN="LEFT"/>systemTime<br ALIGN="LEFT"/>windMode<br ALIGN="LEFT"/>windTime : int<br ALIGN="LEFT"/>|isInMotion()<br ALIGN="LEFT"/>isMovementReady()<br ALIGN="LEFT"/>isStopped()<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"winder.Control.Control.StopMode.StopMode.EStop" [color="black", fontcolor="black", label=<{EStop|control<br ALIGN="LEFT"/>io<br ALIGN="LEFT"/>|update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"winder.Control.Control.G_CodeHandler.G_CodeHandler" [color="black", fontcolor="black", label=<{G_CodeHandler|runToLine : int<br ALIGN="LEFT"/>singleStep : bool<br ALIGN="LEFT"/>|clearCodeError()<br ALIGN="LEFT"/>closeG_Code()<br ALIGN="LEFT"/>closeG_CodeLog()<br ALIGN="LEFT"/>executeG_CodeLine(line)<br ALIGN="LEFT"/>fetchLines(center, delta)<br ALIGN="LEFT"/>getDirection()<br ALIGN="LEFT"/>getG_CodeErrorData()<br ALIGN="LEFT"/>getG_CodeErrorMessage()<br ALIGN="LEFT"/>getLine()<br ALIGN="LEFT"/>getTotalLines()<br ALIGN="LEFT"/>getVelocityScale()<br ALIGN="LEFT"/>isDone()<br ALIGN="LEFT"/>isG_CodeError()<br ALIGN="LEFT"/>isG_CodeLoaded()<br ALIGN="LEFT"/>isOutOfWire()<br ALIGN="LEFT"/>isPositionLogging()<br ALIGN="LEFT"/>loadG_Code(lines, calibration)<br ALIGN="LEFT"/>log_g_code()<br ALIGN="LEFT"/>poll()<br ALIGN="LEFT"/>runNextLine()<br ALIGN="LEFT"/>setDirection(isForward)<br ALIGN="LEFT"/>setG_CodeLog(gCodeLogFile)<br ALIGN="LEFT"/>setLine(line)<br ALIGN="LEFT"/>setVelocityScale(scaleFactor)<br ALIGN="LEFT"/>startPositionLogging(positionLogFileName)<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>stopNext()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"winder.Control.Control.HardwareMode.HardwareMode" [color="black", fontcolor="black", label=<{HardwareMode|io<br ALIGN="LEFT"/>isPLC_Working : bool<br ALIGN="LEFT"/>isStateClear : bool<br ALIGN="LEFT"/>isX_axisWorking : bool<br ALIGN="LEFT"/>isY_axisWorking : bool<br ALIGN="LEFT"/>isZ_axisWorking : bool<br ALIGN="LEFT"/>log<br ALIGN="LEFT"/>|enter()<br ALIGN="LEFT"/>exit()<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"winder.Control.Control.IO_Log.IO_Log" [color="black", fontcolor="black", label=<{IO_Log|<br ALIGN="LEFT"/>|log(timeStamp, loopTime)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"winder.Control.Control.StopMode.StopMode.Idle" [color="black", fontcolor="black", label=<{Idle|control<br ALIGN="LEFT"/>io<br ALIGN="LEFT"/>|update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"winder.Control.Control.LowLevelIO.LowLevelIO" [color="black", fontcolor="black", label=<{LowLevelIO|<br ALIGN="LEFT"/>|getAllDigitalIO()<br ALIGN="LEFT"/>getAllIO()<br ALIGN="LEFT"/>getAnalogInput(name)<br ALIGN="LEFT"/>getAnalogInputs()<br ALIGN="LEFT"/>getAnalogOutput(name)<br ALIGN="LEFT"/>getAnalogOutputs()<br ALIGN="LEFT"/>getDigitalIO(name)<br ALIGN="LEFT"/>getIO(name)<br ALIGN="LEFT"/>getInput(name)<br ALIGN="LEFT"/>getInputs()<br ALIGN="LEFT"/>getMotor(name)<br ALIGN="LEFT"/>getMotors()<br ALIGN="LEFT"/>getOutput(name)<br ALIGN="LEFT"/>getOutputs()<br ALIGN="LEFT"/>getTag(name)<br ALIGN="LEFT"/>getTags()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"winder.Control.Control.ManualMode.ManualMode" [color="black", fontcolor="black", label=<{ManualMode|<br ALIGN="LEFT"/>|enter()<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"winder.Control.Control.StopMode.StopMode.Park" [color="black", fontcolor="black", label=<{Park|control<br ALIGN="LEFT"/>io<br ALIGN="LEFT"/>|update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"winder.Control.Control.Process.Process" [color="black", fontcolor="black", label=<{Process|STAGE_TABLE : dict<br ALIGN="LEFT"/>apa : NoneType<br ALIGN="LEFT"/>cameraCalibration<br ALIGN="LEFT"/>controlStateMachine<br ALIGN="LEFT"/>gCodeHandler<br ALIGN="LEFT"/>headCompensation<br ALIGN="LEFT"/>spool<br ALIGN="LEFT"/>|EOT_reset()<br ALIGN="LEFT"/>acknowledgeError()<br ALIGN="LEFT"/>acknowledgePLC_Init()<br ALIGN="LEFT"/>cameraSeekCenter(velocity)<br ALIGN="LEFT"/>closeAPA()<br ALIGN="LEFT"/>commitCalibration(side, offsetX, offsetY)<br ALIGN="LEFT"/>createAPA(apaName)<br ALIGN="LEFT"/>executeG_CodeLine(line)<br ALIGN="LEFT"/>getAPA_DetailedList()<br ALIGN="LEFT"/>getAPA_Details(name)<br ALIGN="LEFT"/>getAPA_List()<br ALIGN="LEFT"/>getAPA_Side()<br ALIGN="LEFT"/>getCameraImageURL()<br ALIGN="LEFT"/>getG_CodeDirection()<br ALIGN="LEFT"/>getG_CodeList(center, delta)<br ALIGN="LEFT"/>getG_CodeLoop()<br ALIGN="LEFT"/>getHeadAngle()<br ALIGN="LEFT"/>getLayerPinGeometry()<br ALIGN="LEFT"/>getLoadedAPA_Name()<br ALIGN="LEFT"/>getPositionLogging()<br ALIGN="LEFT"/>getRecipeLayer()<br ALIGN="LEFT"/>getRecipeName()<br ALIGN="LEFT"/>getRecipes()<br ALIGN="LEFT"/><I>getRemainingWire</I>()<br ALIGN="LEFT"/>getStage()<br ALIGN="LEFT"/>jogXY(xVelocity, yVelocity, acceleration, deceleration)<br ALIGN="LEFT"/>jogZ(velocity)<br ALIGN="LEFT"/>manualHeadPosition(position, velocity)<br ALIGN="LEFT"/>manualSeekXY(xPosition, yPosition, velocity, acceleration, deceleration)<br ALIGN="LEFT"/>manualSeekZ(position, velocity)<br ALIGN="LEFT"/>maxVelocity(maxVelocity)<br ALIGN="LEFT"/>seekPin(pin, velocity)<br ALIGN="LEFT"/>seekPinNominal(pin, velocity)<br ALIGN="LEFT"/>servoDisable()<br ALIGN="LEFT"/>setAnchorPoint(pinA, pinB)<br ALIGN="LEFT"/>setCameraImageURL(url)<br ALIGN="LEFT"/>setG_CodeDirection(isForward)<br ALIGN="LEFT"/>setG_CodeLine(line)<br ALIGN="LEFT"/>setG_CodeLoop(isLoopMode)<br ALIGN="LEFT"/>setG_CodeRunToLine(line)<br ALIGN="LEFT"/>setG_CodeVelocityScale(scaleFactor)<br ALIGN="LEFT"/><I>setMinimumWire</I>(length)<br ALIGN="LEFT"/>setPositionLogging(isEnabled)<br ALIGN="LEFT"/>setStage(stage, message)<br ALIGN="LEFT"/><I>setWireLength</I>(length)<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>startCalibrate(side, startPin, endPin, maxPins, deltaX, deltaY, velocity, acceleration, deceleration)<br ALIGN="LEFT"/>step()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>stopNextLine()<br ALIGN="LEFT"/>switchAPA(apaName)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"winder.Control.Control.APA_Base.APA_Base.Side" [color="black", fontcolor="black", label=<{Side|BACK : int<br ALIGN="LEFT"/>FRONT : int<br ALIGN="LEFT"/>NONE : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"winder.Control.Control.APA_Base.APA_Base.Stages" [color="black", fontcolor="black", label=<{Stages|COMPLETE : int<br ALIGN="LEFT"/>LAYER_G_FIRST : int<br ALIGN="LEFT"/>LAYER_G_SECOND : int<br ALIGN="LEFT"/>LAYER_U_FIRST : int<br ALIGN="LEFT"/>LAYER_U_SECOND : int<br ALIGN="LEFT"/>LAYER_V_FIRST : int<br ALIGN="LEFT"/>LAYER_V_SECOND : int<br ALIGN="LEFT"/>LAYER_X_FIRST : int<br ALIGN="LEFT"/>LAYER_X_SECOND : int<br ALIGN="LEFT"/>SIGN_OFF : int<br ALIGN="LEFT"/>UNINITIALIZED : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"winder.Control.Control.StopMode.StopMode.StopStateMachine.States" [color="black", fontcolor="black", label=<{States|ESTOP : int<br ALIGN="LEFT"/>IDLE : int<br ALIGN="LEFT"/>PARK : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"winder.Control.Control.ControlStateMachine.ControlStateMachine.States" [color="black", fontcolor="black", label=<{States|CALIBRATE : tuple<br ALIGN="LEFT"/>HARDWARE : tuple<br ALIGN="LEFT"/>MANUAL : tuple<br ALIGN="LEFT"/>STOP : tuple<br ALIGN="LEFT"/>TENTION : int<br ALIGN="LEFT"/>WIND : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"winder.Control.Control.StopMode.StopMode" [color="black", fontcolor="black", label=<{StopMode|io<br ALIGN="LEFT"/>stateMachine<br ALIGN="LEFT"/>stopStateMachine<br ALIGN="LEFT"/>|isIdle()<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"winder.Control.Control.StopMode.StopMode.StopStateMachine" [color="black", fontcolor="black", label=<{StopStateMachine|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"winder.Control.Control.WindMode.WindMode" [color="black", fontcolor="black", label=<{WindMode|<br ALIGN="LEFT"/>|enter()<br ALIGN="LEFT"/>exit()<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"winder.Control.Control.StopMode.StopMode.StopStateMachine" -> "winder.Control.Control.StopMode.StopMode" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="stopStateMachine", style="solid"];
"winder.Control.Control.G_CodeHandler.G_CodeHandler" -> "winder.Control.Control.AnodePlaneArray.AnodePlaneArray" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_gCodeHandler", style="solid"];
}
